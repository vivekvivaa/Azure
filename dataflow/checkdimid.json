{
	"name": "checkdimid",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csvfile",
						"type": "DatasetReference"
					},
					"name": "sourceinputfile"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sourceDbtable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "Azsink"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "computehash"
				},
				{
					"name": "checkdimid"
				},
				{
					"name": "Newrecordsplit"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tdinid as string,\n\t\tname as string,\n\t\tage as string,\n\t\thomecountry as string,\n\t\tiplteam as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceinputfile\nsource(output(\n\t\tdinid as integer,\n\t\tName as string,\n\t\tAge as integer,\n\t\tHomeCountry as string,\n\t\tiplteam as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceDbtable\nsourceinputfile derive(hash = toBinary(md5(dinid+iplteam)),\n\t\tid = toInteger(dinid)) ~> computehash\ncomputehash, sourceDbtable lookup(toInteger(sourceinputfile@dinid) == sourceDbtable@dinid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> checkdimid\ncheckdimid split(isNull(sourceDbtable@dinid),\n\t!isNull(sourceDbtable@dinid),\n\tdisjoint: false) ~> Newrecordsplit@(Newrecords, Updaterecord)\nNewrecordsplit@Updaterecord alterRow(updateIf(true())) ~> AlterRow1\nNewrecordsplit@Newrecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdinid as integer,\n\t\tName as string,\n\t\tAge as integer,\n\t\tHomeCountry as string,\n\t\tiplteam as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdinid = Newrecordsplit@Newrecords@dinid,\n\t\tName = Newrecordsplit@Newrecords@name,\n\t\tAge = Newrecordsplit@Newrecords@age,\n\t\tHomeCountry = Newrecordsplit@Newrecords@homecountry,\n\t\tiplteam = Newrecordsplit@Newrecords@iplteam\n\t)) ~> Azsink\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdinid as integer,\n\t\tName as string,\n\t\tAge as integer,\n\t\tHomeCountry as string,\n\t\tiplteam as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tdinid = Newrecordsplit@Updaterecord@dinid,\n\t\tName = Newrecordsplit@Updaterecord@name,\n\t\tAge = Newrecordsplit@Updaterecord@age,\n\t\tHomeCountry = Newrecordsplit@Updaterecord@homecountry,\n\t\tiplteam = Newrecordsplit@Updaterecord@iplteam\n\t)) ~> sink1"
		}
	}
}